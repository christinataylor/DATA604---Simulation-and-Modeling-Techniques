set.seed(4388)
n = 20
alpha = 0.5
reps = 1000
mlg <- runif(1, min = 0, max = 1)
sdlg <- runif(1, min = 0, max = 2)
calcCI <- function(n, alpha){
x <- rlnorm(n, mlg, sdlg)
return((n-1) * var(x) / qchisq(alpha, df = n-1))
}
UCL <- replicate(reps, calcCI(n, alpha))
sum(UCL > sdlg^2)
mean(UCL > sdlg^2)
library(bootstrap)
kable(latin.cost.sim.2.results)
setwd("~/Documents/Graduate School/604 - Simulation and Modeling Techniques/homework/HW 4")
# Chunk 1
library(ggplot2)
library(dplyr)
library(knitr)
library(grid)
library(gridExtra)
# Chunk 2
set.seed(1272)
# Chunk 3
first.multiplier <- function(D){
return(1/((2*pi)^(D/2)))
}
# Chunk 4
D.seq <- seq(1, from=1, to=10)
first.multiplier.list <- sapply(D.seq, FUN=first.multiplier)
plot(first.multiplier.list,  type = "l")
# Chunk 5
exponent.function <- function(x){
return((-1/2)*(t(x)%*%x))
}
n <- 10
D <- 2
x <- matrix(runif(D*n, min = -5, max = 5), ncol=D)
exponent.function(x)
# Chunk 6
cost.function.crude <- function(x, D){
first.multiplier.sim <- first.multiplier(D)
exponent.sim <- exponent.function(x)
return(first.multiplier.sim * exp(exponent.sim))
}
# Chunk 7
n <- 1
D <- 2
x <- matrix(runif(D*n, min = -5, max = 5), nrow=n, ncol=D)
# Chunk 8
cost.function.crude.apply <- function(x, D){
return(mean(apply(x, 1, FUN = cost.function.crude, D=D)))
}
cost.function.crude.apply(x, D)
# Chunk 9
n.increments <- seq(from = 1000, to = 10000, by = 1000)
generate.x.list <- function(n, D){
x <- matrix(runif(D*n, min = -5, max = 5), nrow=n, ncol=D)
return(x)
}
x.list <- lapply(n.increments, FUN = generate.x.list, D=D)
# Chunk 10
D.1 <- 1
crude.cost.sim.1 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list, D=D.1), FUN = cost.function.crude.apply, D=D.1))
# Chunk 11
crude.cost.sim.1.means <- apply(crude.cost.sim.1, 1, FUN = mean)
crude.cost.sim.1.sd <- apply(crude.cost.sim.1, 1, FUN = sd)
n <- n.increments
crude.cost.sim.1.results <- cbind(n, crude.cost.sim.1.means, crude.cost.sim.1.sd) %>% as.data.frame()
colnames(crude.cost.sim.1.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 12
limits <- aes(ymax = Cost.Means + Cost.Standard.Deviation, ymin = Cost.Means - Cost.Standard.Deviation)
ggplot(crude.cost.sim.1.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits)
# Chunk 13
crude.cost.sim.1.results <- crude.cost.sim.1.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 14
kable(crude.cost.sim.1.results)
# Chunk 15
D.2 = 2
crude.cost.sim.2 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list, D = D.2), FUN = cost.function.crude.apply, D = D.2))
(target.D.2 <- (1/10)^2)
# Chunk 16
crude.cost.sim.2.means <- apply(crude.cost.sim.2, 1, FUN = mean)
crude.cost.sim.2.sd <- apply(crude.cost.sim.2, 1, FUN = sd)
crude.cost.sim.2.results <- cbind(n, crude.cost.sim.2.means, crude.cost.sim.2.sd) %>% as.data.frame()
colnames(crude.cost.sim.2.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 17
limits.2 <- aes(ymax = Cost.Means + Cost.Standard.Deviation, ymin = Cost.Means - Cost.Standard.Deviation)
ggplot(crude.cost.sim.2.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits.2)
# Chunk 18
crude.cost.sim.2.results <- crude.cost.sim.2.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 19
kable(crude.cost.sim.2.results)
# Chunk 20
library(randtoolbox)
# Chunk 21
n = 100
sobol.xy <- sobol(n, dim = 2) %>% as.data.frame()
sobol <- qplot(sobol.xy$V1, sobol.xy$V2, main="Sobol")
unif.xy <- cbind(runif(n), runif(n)) %>% as.data.frame()
rand <- qplot(unif.xy$V1, unif.xy$V2, main = "Random")
grid.arrange(sobol, rand, nrow=1)
# Chunk 22
generate.x.list.Sobol <- function(n, D){
sobol.seq <- (sobol(n, dim = D) * 10) - 5
x <- as.matrix(sobol.seq)
return(x)
}
# Chunk 23
D.1 <- 1
sobol.cost.sim.1 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list.Sobol, D=D.1), FUN = cost.function.crude.apply, D=D.1))
# Chunk 24
sobol.cost.sim.1.means <- apply(sobol.cost.sim.1, 1, FUN = mean)
sobol.cost.sim.1.sd <- apply(sobol.cost.sim.1, 1, FUN = sd)
n <- n.increments
sobol.cost.sim.1.results <- cbind(n, sobol.cost.sim.1.means, sobol.cost.sim.1.sd) %>% as.data.frame()
colnames(sobol.cost.sim.1.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 25
ggplot(sobol.cost.sim.1.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits)
# Chunk 26
sobol.cost.sim.1.results <- sobol.cost.sim.1.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 27
kable(sobol.cost.sim.1.results)
# Chunk 28
D.2 = 2
sobol.cost.sim.2 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list.Sobol, D = D.2), FUN = cost.function.crude.apply, D = D.2))
# Chunk 29
sobol.cost.sim.2.means <- apply(sobol.cost.sim.2, 1, FUN = mean)
sobol.cost.sim.2.sd <- apply(sobol.cost.sim.2, 1, FUN = sd)
sobol.cost.sim.2.results <- cbind(n, sobol.cost.sim.2.means, sobol.cost.sim.2.sd) %>% as.data.frame()
colnames(sobol.cost.sim.2.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 30
ggplot(sobol.cost.sim.2.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits.2)
# Chunk 31
sobol.cost.sim.2.results <- sobol.cost.sim.2.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 32
kable(sobol.cost.sim.2.results)
# Chunk 33
generate.x.list.antithetic <- function(n, D){
x <- matrix(runif(D*n, min = 0, max = 1), nrow=n, ncol=D)
for(i in 1:nrow(x)){
ifelse(i %% 2 == 0, x[i,] <- 1 - x[i-1,], next)
}
x <- (x * 10) - 5
return(x)
}
# Chunk 34
generate.x.list.antithetic(4, 3)
# Chunk 35
D.1 <- 1
antithetic.cost.sim.1 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list.antithetic, D=D.1), FUN = cost.function.crude.apply, D=D.1))
# Chunk 36
antithetic.cost.sim.1.means <- apply(antithetic.cost.sim.1, 1, FUN = mean)
antithetic.cost.sim.1.sd <- apply(antithetic.cost.sim.1, 1, FUN = sd)
n <- n.increments
antithetic.cost.sim.1.results <- cbind(n, antithetic.cost.sim.1.means, antithetic.cost.sim.1.sd) %>% as.data.frame()
colnames(antithetic.cost.sim.1.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 37
limits <- aes(ymax = Cost.Means + Cost.Standard.Deviation, ymin = Cost.Means - Cost.Standard.Deviation)
ggplot(antithetic.cost.sim.1.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits)
# Chunk 38
antithetic.cost.sim.1.results <- antithetic.cost.sim.1.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 39
kable(antithetic.cost.sim.1.results)
# Chunk 40
D.2 = 2
antithetic.cost.sim.2 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list.antithetic, D = D.2), FUN = cost.function.crude.apply, D = D.2))
# Chunk 41
antithetic.cost.sim.2.means <- apply(antithetic.cost.sim.2, 1, FUN = mean)
antithetic.cost.sim.2.sd <- apply(antithetic.cost.sim.2, 1, FUN = sd)
antithetic.cost.sim.2.results <- cbind(n, antithetic.cost.sim.2.means, antithetic.cost.sim.2.sd) %>% as.data.frame()
colnames(antithetic.cost.sim.2.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 42
limits.2 <- aes(ymax = Cost.Means + Cost.Standard.Deviation, ymin = Cost.Means - Cost.Standard.Deviation)
ggplot(antithetic.cost.sim.2.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits.2)
# Chunk 43
antithetic.cost.sim.2.results <- antithetic.cost.sim.2.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 44
kable(antithetic.cost.sim.2.results)
# Chunk 45
library(lhs)
# Chunk 46
generate.x.list.latin <- function(n, D){
x <- as.matrix((randomLHS(n,D) * 10) - 5 )
return(x)
}
# Chunk 47
D.1 <- 1
latin.cost.sim.1 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list.latin, D=D.1), FUN = cost.function.crude.apply, D=D.1))
# Chunk 48
latin.cost.sim.1.means <- apply(latin.cost.sim.1, 1, FUN = mean)
latin.cost.sim.1.sd <- apply(latin.cost.sim.1, 1, FUN = sd)
n <- n.increments
latin.cost.sim.1.results <- cbind(n, latin.cost.sim.1.means, latin.cost.sim.1.sd) %>% as.data.frame()
colnames(latin.cost.sim.1.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 49
ggplot(latin.cost.sim.1.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits)
# Chunk 50
latin.cost.sim.1.results <- latin.cost.sim.1.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 51
kable(latin.cost.sim.1.results)
# Chunk 52
D.2 = 2
latin.cost.sim.2 <- replicate(100, sapply(lapply(n.increments, FUN = generate.x.list.latin, D = D.2), FUN = cost.function.crude.apply, D = D.2))
# Chunk 53
latin.cost.sim.2.means <- apply(sobol.cost.sim.2, 1, FUN = mean)
latin.cost.sim.2.sd <- apply(sobol.cost.sim.2, 1, FUN = sd)
latin.cost.sim.2.results <- cbind(n, latin.cost.sim.2.means, latin.cost.sim.2.sd) %>% as.data.frame()
colnames(latin.cost.sim.2.results) <- c("n", "Cost.Means", "Cost.Standard.Deviation")
# Chunk 54
ggplot(latin.cost.sim.2.results, aes(x=n, y=Cost.Means)) + geom_line() + geom_errorbar(limits.2)
# Chunk 55
latin.cost.sim.2.results <- latin.cost.sim.2.results %>%
mutate(Cost.Coeff.Varation = Cost.Standard.Deviation / Cost.Means)
# Chunk 56
kable(latin.cost.sim.2.results)
# Chunk 57
empirical.power <- function(n){
m = 1000
mu0 = 500
sigma = 100
mu <- c(seq(450, 650, 10))
M <- length(mu)
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, expr = {
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x, alternative = "greater",
mu = mu0)
ttest$p.value})
power[i] <- mean(pvalues <= 0.05)
}
return(power)
}
# Chunk 58
n.set <- seq(from = 10, to = 50, by = 10)
power.sim <- lapply(n.set, FUN = empirical.power)
# Chunk 59
theta <- seq(450, 650, 10)
tidy.results <- NULL
for (i in 1:length(n.set)){
results.set <- cbind(rep(i*10, times = length(n.set)),
theta, unlist(power.sim[i]))
tidy.results <- rbind(results.set, tidy.results)
}
tidy.results.6.3 <- as.data.frame(tidy.results)
colnames(tidy.results.6.3) <- c("Sample.Size", "Theta", "Power")
tidy.results.6.3$Sample.Size <- as.factor(tidy.results.6.3$Sample.Size)
# Chunk 60
ggplot(tidy.results.6.3) +
geom_line(aes(x = Theta, y = Power, group = Sample.Size, color = Sample.Size))
# Chunk 61
set.seed(4388)
n = 20
alpha = 0.5
reps = 1000
mlg <- runif(1, min = 0, max = 1)
sdlg <- runif(1, min = 0, max = 2)
calcCI <- function(n, alpha){
x <- rlnorm(n, mlg, sdlg)
return((n-1) * var(x) / qchisq(alpha, df = n-1))
}
UCL <- replicate(reps, calcCI(n, alpha))
sum(UCL > sdlg^2)
mean(UCL > sdlg^2)
# Chunk 62
data(law, package = 'bootstrap')
law <- law
# Chunk 63
n <- nrow(law)
lsat <- law$LSAT
gpa <- law$GPA
(theta.hat <-cor(lsat, gpa))
# Chunk 64
theta.jack <- numeric(n)
for (i in 1:n){
theta.jack[i] <- cor(lsat[-i], gpa[-i])
}
(bais <- (n-1) * (mean(theta.jack) - theta.hat))
# Chunk 65
(se <- sqrt((n-1) * mean((theta.jack - mean(theta.jack))^2)))
# Chunk 66
data(aircondit, package = 'bootstrap')
aircondit <- aircondit
install.packages("boot", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
str(latin.cost.sim.1.means)
View(crude.cost.sim.1.results)
crude.cost.sim.1.results[1,]
crude.cost.sim.1.results[c(1,4),]
summary <- cbind(c("crude", "crude"), crude.cost.sim.1.results[c(1,4),], c(1000,4000), c(1,2))
summary
View(summary)
summary <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000), c(1,1)))
View(summary)
summary <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000), c(2,2)))
View(summary)
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000), c(2,2)))
library(ggplot2)
library(dplyr)
library(knitr)
library(grid)
library(gridExtra)
library(dplyr)
View(summary)
str(summary)
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rename(c("crude", "crude") = method)
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rename(`c("crude", "crude")` = method)
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rename(`c("crude", "crude")` = "method")
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rename("c("crude", "crude")" = "method")
summary.cost <- bind_cols(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
bind_rows(bind_cols(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000), c(2,2)))
summary.cost <- bind_cols(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1))
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000), c(1,1)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000), c(2,2)))
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000)))
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000))) %>%
rbind(cbind(c("sobol", "sobol"),
sobol.sim.2.results[c(1,4),],
c(1000,4000))) %>%
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000))) %>%
rbind(cbind(c("sobol", "sobol"),
sobol.sim.1.results[c(1,4),],
c(1000,4000))) %>%
rbind(cbind(c("sobol", "sobol"),
sobol.sim.2.results[c(1,4),],
c(1000,4000))) %>%
View(summary)
summary.cost <- cbind(c("crude", "crude"),
crude.cost.sim.1.results[c(1,4),],
c(1000,4000)) %>%
rbind(cbind(c("crude", "crude"),
crude.cost.sim.2.results[c(1,4),],
c(1000,4000))) %>%
rbind(cbind(c("sobol", "sobol"),
sobol.cost.sim.1.results[c(1,4),],
c(1000,4000))) %>%
rbind(cbind(c("sobol", "sobol"),
sobol.cost.sim.2.results[c(1,4),],
c(1000,4000))) %>%
.
summary.cost <- rbind(crude.cost.sim.1.results, crude.cost.sim.2.results,
sobol.cost.sim.1.results, sobol.cost.sim.2.results,
antithetic.cost.sim.1.results, antithetic.cost.sim.2.results,
latin.cost.sim.1.results, latin.cost.sim.2.results)
dimensions <- rep(c(1,1,2,2), 4)
dimensions
summary.cost <- rbind(crude.cost.sim.1.results, crude.cost.sim.2.results,
sobol.cost.sim.1.results, sobol.cost.sim.2.results,
antithetic.cost.sim.1.results, antithetic.cost.sim.2.results,
latin.cost.sim.1.results, latin.cost.sim.2.results)
dimensions <- rep(c(1,1,2,2), 4)
method <- c("crude", "crude", "sobol", "sobol", "antithetic", "antithetic", "latin", "latin")
n <- rep(c(1000, 4000), 8)
summary.cost <- cbind(method, dimension, n, summary.cost)
summary.cost <- rbind(crude.cost.sim.1.results, crude.cost.sim.2.results,
sobol.cost.sim.1.results, sobol.cost.sim.2.results,
antithetic.cost.sim.1.results, antithetic.cost.sim.2.results,
latin.cost.sim.1.results, latin.cost.sim.2.results)
dimensions <- rep(c(1,1,2,2), 4)
method <- c("crude", "crude", "sobol", "sobol", "antithetic", "antithetic", "latin", "latin")
n <- rep(c(1000, 4000), 8)
summary.cost <- cbind(method, dimensions, n, summary.cost)
View(summary.cost)
summary.cost <- rbind(crude.cost.sim.1.results, crude.cost.sim.2.results,
sobol.cost.sim.1.results, sobol.cost.sim.2.results,
antithetic.cost.sim.1.results, antithetic.cost.sim.2.results,
latin.cost.sim.1.results, latin.cost.sim.2.results)
summary.cost <- rbind(crude.cost.sim.1.results[c(1,4),], crude.cost.sim.2.results[c(1,4),],
sobol.cost.sim.1.results[c(1,4),], sobol.cost.sim.2.results[c(1,4),],
antithetic.cost.sim.1.results[c(1,4),], antithetic.cost.sim.2.results[c(1,4),],
latin.cost.sim.1.results[c(1,4),], latin.cost.sim.2.results[c(1,4),])
dimensions <- rep(c(1,1,2,2), 4)
method <- c(rep("crude",4), rep("sobol", 4), rep("antithetic", 4), rep("latin",4))
n <- rep(c(1000, 4000), 8)
summary.cost <- cbind(method, dimensions, n, summary.cost)
View(summary.cost)
ggplot(summary.cost, aes(factor(method), Cost.means)) + geom_point()
ggplot(summary.cost, aes(factor(method), Cost.Means)) + geom_point()
ggplot(summary.cost %>% filter(dimensions=1), aes(factor(method), Cost.Means)) + geom_point()
summary.cost %>% filter(dimensions=1)
str(summary)
str(summary.cost)
n
ggplot(summary.cost %>% filter(dimensions=1), aes(factor(method), Cost.Means)) + geom_point()
summary.cost <- rbind(crude.cost.sim.1.results[c(1,4),], crude.cost.sim.2.results[c(1,4),],
sobol.cost.sim.1.results[c(1,4),], sobol.cost.sim.2.results[c(1,4),],
antithetic.cost.sim.1.results[c(1,4),], antithetic.cost.sim.2.results[c(1,4),],
latin.cost.sim.1.results[c(1,4),], latin.cost.sim.2.results[c(1,4),])
dimensions <- rep(c(1,1,2,2), 4)
method <- c(rep("crude",4), rep("sobol", 4), rep("antithetic", 4), rep("latin",4))
summary.cost <- cbind(method, dimensions, n, summary.cost)
kable(summary.cost)
ggplot(summary.cost %>% filter(dimensions=1), aes(factor(method), Cost.Means)) + geom_point()
str(summary.cost)
summary.cost <- rbind(crude.cost.sim.1.results[c(1,4),], crude.cost.sim.2.results[c(1,4),],
sobol.cost.sim.1.results[c(1,4),], sobol.cost.sim.2.results[c(1,4),],
antithetic.cost.sim.1.results[c(1,4),], antithetic.cost.sim.2.results[c(1,4),],
latin.cost.sim.1.results[c(1,4),], latin.cost.sim.2.results[c(1,4),])
dimensions <- rep(c(1,1,2,2), 4)
method <- c(rep("crude",4), rep("sobol", 4), rep("antithetic", 4), rep("latin",4))
summary.cost <- cbind(method, dimensions, summary.cost)
kable(summary.cost)
ggplot(summary.cost %>% filter(dimensions=1), aes(factor(method), Cost.Means)) + geom_point()
summary.cost %>% filter(dimensions=1)
summary.cost %>% filter(dimensions==1)
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means)) + geom_point()
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means)) + geom_point() + geom_errorbar(aes(Cost.Standard.Deviation))
?geom_errorbar
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means)) + geom_point()
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means)) +
geom_point() + ggtitle("One Dimension")
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means)) +
geom_point() + ggtitle("Two Dimensions")
ggplot(summary.cost %>% filter(dimensions==2), aes(factor(method), Cost.Means)) +
geom_point() + ggtitle("Two Dimensions")
summary.cost <- rbind(crude.cost.sim.1.results[c(1,4),], crude.cost.sim.2.results[c(1,4),],
sobol.cost.sim.1.results[c(1,4),], sobol.cost.sim.2.results[c(1,4),],
antithetic.cost.sim.1.results[c(1,4),], antithetic.cost.sim.2.results[c(1,4),],
latin.cost.sim.1.results[c(1,4),], latin.cost.sim.2.results[c(1,4),])
dimensions <- rep(c(1,1,2,2), 4)
method <- c(rep("crude",4), rep("sobol", 4), rep("antithetic", 4), rep("latin",4))
summary.cost <- cbind(method, dimensions, summary.cost)
summary.cost$upper <- summary.cost$Cost.Means + summary.cost$Cost.Standard.Deviation
summary.cost$lower <- summary.cost$Cost.Means - summary.cost$Cost.Standard.Deviation
kable(summary.cost)
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means)) +
geom_point() + ggtitle("One Dimension") + geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means)) +
geom_point() + ggtitle("One Dimension") + geom_errorbar(aes(ymin = lower, ymax = upper), dodge = TRUE)
ggplot(summary.cost %>% filter(dimensions==2), aes(factor(method), Cost.Means)) +
geom_point() + ggtitle("Two Dimensions")+ geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means), color = n) +
geom_point() + ggtitle("One Dimension")
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means, color = n)) +
geom_point() + ggtitle("One Dimension")
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means, color = factor(n))) +
geom_point() + ggtitle("One Dimension")
ggplot(summary.cost %>% filter(dimensions==2), aes(factor(method), Cost.Means, color = factor(n))) +
geom_point() + ggtitle("Two Dimensions")
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Standard.Deviation, color = factor(n))) +
geom_bar() + ggtitle("One Dimension")
?geom_bar
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Standard.Deviation, color = factor(n))) +
geom_bar(stat = "identity") + ggtitle("One Dimension")
ggplot(summary.cost %>% filter(dimensions==2), aes(factor(method), Cost.Standard.Deviation, color = factor(n))) +
geom_bar(stat = "identity") + ggtitle("One Dimension")
ggplot(summary.cost %>% filter(dimensions==1), aes(factor(method), Cost.Means, color = factor(n))) +
geom_point() + ggtitle("One Dimension")
install.packages("boot", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(aircondit, package = 'boot')
aircondit <- aircondit
